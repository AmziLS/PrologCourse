:- ensure_loaded(list).
:- import(list).

%-----------------------------
% isa(T1, T2).
% where T1 is a T2
%

isa1(basketball, team_sport).
isa1(baseball, team_sport).
isa1(football, team_sport).
isa1(softball, baseball).
isa1(hardball, baseball).
isa1(team_sport, sport).
isa1(individual_sport, sport).
isa1(golf, individual_sport).
isa1(golf, frustrating).
isa1(apple, fruit).
isa1(pear, fruit).
isa1(fruit, food).
isa1(apple, computer).
isa1(macintosh, apple).
isa1(pc, computer).
isa1(hamburger, meat).
isa1(meat, food).
isa1(hotdog, meat).

%--------------------------------------------------------------------
% isa(X, Y)
% Y - a category
% X - an item that fits in that category, or its subcategory.
% use the isa1/2 facts.
%
% ?- isa(football, team_sport).
% yes.
% ?- isa(golf, team_sport).
% no.
% ?- isa(golf, sport).
% ?- isa(X, sport).
% X = baseball ; etc.
%
% Like ancestor/descendent - isa will be more efficient
% one way than the other.
%
% Rather than write two predicates, write one with two
% recursive clauses, one for each case.
%
% The built-in var(X) can be used to test if an argument
% is a variable.  Or nonvar(X) can be used instead.
%
% The cut (!) can be used to tell Prolog not to consider
% the second recursive clause if the first one is being
% used.
%


%--------------------------------------------------
% basic_isa(Category).
%
% lists all the lowest level items in a category.
%
% basic_isa(food).
% delicious
% macintosh
% pear
% hamburger
% hotdog
%



% END ISA DATING EXERCISES
%---------------------------------------------------

%---------------------------------------------------
% facts that are logically the
% same but are represented using lists.
% ako( Category, Items ).
%

ako1(sport, [team_sport, individual_sport]).
ako1(team_sport, [basketball, baseball, football, ultimate_frisbee]).
ako1(individual_sport, [golf, tennis, rock_climbing, running, cycling]).
ako1(baseball, [softball, hardball]).
ako1(football, [touch_football, flag_football, tackle_football]).
ako1(rock_climbing, [bouldering, sport_climbing, trad_climbing]).
ako1(cycling, [mountain_biking, road_racing]).
ako1(alcohol, [wine, beer]).
ako1(beer, [bud, miller, corona]).
ako1(wine, [merlot, chardonay]).
ako1(pizza, [pepperoni_pizza, cheese_pizza]).
ako1(movie, [drama_flic, comedy_flic, action_flic, scifi_flic]).
ako1(scifi_flic, ['Matrix', 'Terminator']).
ako1(action_flic, ['Matrix', 'Terminator', 'The Mummy']).
ako1(comedy_flic, ['Nurse Betty', 'Dumb and Dumber']).

%-----------------------------------------------
% some people and the things they like
%

person(bob, [girls, softball, golf, pizza, movies] ).
person(sally, [tackle_football, mountain_biking, 'Matrix']).
person(bill, [bud, 'Terminator']).
person(sue, [merlot, golf, 'Matrix']).
person(samantha, [pizza, parks, 'Terminator']).
person(al, [parks, golf, 'Nurse Betty']).
person(sabina, [merlot, tackle_football, 'The Mummy']).
